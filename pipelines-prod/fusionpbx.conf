input {
    http {
        host => "0.0.0.0"
        port => 8081
    }
}

filter {
        urldecode{ }
        grok {
                patterns_dir => ["pattern"]
                match => {"message" => "(/\?)?(?<server>([^[\#]]*))\#(?<domain>([^[\#]]*))\#(?<direction>([^[\#]]*))\#(?<callerID>([^[\#]]*))\#(?<calleeID>([^[\#]]*))\#(?<callerIDNo>([^[\#]]*))\#(?<calleeIDNo>([^[\#]]*))\#(?<from uri>([^[\#,]]*)),(?<to uri>([^[\#]]*))\#(?<last_sent_callee_id_name>([^[\#,]]*)),(?<last_sent_callee_id_number>([^[\#]]*))\#(?<transfer_history>([^[\#]]*))\#(?<callid>([^[\#/]]*))/(?<sipCallid>([^[\#]]*))/(?<flowid>([^[\#/]]*))\#(?<sip agent>([^\#]*))\#(?<start_unix>([0-9]*)),(?<answer_unix>([0-9]*)),(?<hangup_unix>([0-9]*))/(?<progress msec>([0-9]*)),(?<wait sec>([0-9]*)),(?<progress media msec>([0-9]*))\#%{NUMBER:duration:int},%{NUMBER:billsec:int}\#(?<hangup causes>([^[\#/]]*))/(?<dispositions>([^[\#]]*))\#(?<read codec>([^[\# /]]*))/(?<write codec>([^[\# /]]*))\#(?<local media port>([^[\#,]]*)),(?<remote media port>([^[\#/]]*))/%{NUMBER:rtp_in_media_pkg:int},%{NUMBER:rtp_in_skip_pkg:int},%{NUMBER:rtp_in_cng_pkg:int}/%{NUMBER:rtp_out_media_pkg:int},%{NUMBER:rtp_out_skip_pkg:int},%{NUMBER:rtp_out_cng_pkg:int},%{NUMBER:MOS}\#(?<record_path>([^[\#]]*))\#(?<uuid>([^[\#]]*))\#(?<bridge_uuid>([^[\#]]*))\#(?<last_app>([^[\#]]*))\#(?<last_arg>([^[\#]]*))\#(?<bridge_channel>([^[\#]]*))"
                }
       }
    if "N_A" in [domain]{
        drop{ }
    }
    if "N_A" in [direction]{
	drop{ }
}
	prune {
                blacklist_values => {
                    "callerIDNo" => "^N_A$"
                    "calleeIDNo" => "^N_A$"
                    "from uri" => "^N_A$"
                    "to uri" => "^N_A$"
                    "callerID" => "^N_A$"
                    "calleeID" => "^N_A$"
                    "record_path" => "^N_A$"
		    "last_sent_callee_id_number" => "^N_A$"
                    "last_sent_callee_id_name" => "^N_A$"
                    }
       }

    mutate { convert => {"start_unix" => "integer"}}
    mutate { convert => {"hangup_unix" => "integer"}}
    mutate { convert => {"answer_unix" => "integer"}}

    mutate { convert => {"duration" => "integer"}}
    mutate { convert => {"billsec" => "integer"}}
    mutate { convert => {"rtp_in_media_pkg" => "integer"}}
    mutate { convert => {"rtp_in_skip_pkg" => "integer"}}
    mutate { convert => {"rtp_in_cng_pkg" => "integer"}}
    mutate { convert => {"rtp_out_media_pkg" => "integer"}}
    mutate { convert => {"rtp_out_skip_pkg" => "integer"}}
    mutate { convert => {"rtp_out_cng_pkg" => "integer"}}
    mutate { convert => {"MOS" => "float"}}
    mutate { remove_field => ["@version","headers"]}
    mutate { convert => {"progress media msec" => "integer"}}
    mutate { convert => {"progress msec" => "integer"}}
    mutate { convert => {"wait sec" => "integer"}}
	

    # mutate { add_field => {"request_uri" => "message"}}
    if "_grokparsefailure" in [tags]{
        drop{ }
    }
	if ("inbound" in [direction] and "ORIGINATOR_CANCEL,N_A" in [hangup causes])
	{
        mutate { add_field => { "meta_type" => "missed call" } }
	}
	else if ("inbound" in [direction] and "ANSWER" not in [dispositions] and [wait sec] == 0 and [MOS] != 0 and [billsec] == 0 and "ORIGINATOR_CANCEL,sip" not in [hangup causes])
	{
        mutate { add_field => { "meta_type" => "missed call" } }
	}
	else if ("outbound" in [direction] and [calleeID] not in [to uri])
	{
	mutate { add_field => { "meta_type" => "forwarded call" } }
	}	
    	else if ([progress msec] == 0 and "NORMAL_CLEARING,sip:200" in [hangup causes] and [wait sec] == 0 and "inbound" in [direction] and "failure" not in [dispositions])
        {
        mutate { add_field => { "meta_type" => "missed call" } }
        }
	else if ([progress msec] == 0 and [progress media msec] == 0 and "NORMAL_CLEARING" in [hangup causes] and [wait sec] == 0 and "inbound" in [direction])
        {
        mutate { add_field => { "meta_type" => "missed call" } }
        }
	else if ([progress msec] == 0 and "NORMAL_CLEARING,N_A" in [hangup causes] and [wait sec] == 0 and "inbound" in [direction] and "failure" in [dispositions])
        {
        mutate { add_field => { "meta_type" => "missed call" } }
        }
	else if ("inbound" in [direction] and "" not in [last_sent_callee_id_name] and "" not in "last_sent_callee_id_number")
        {
        mutate { add_field => { "meta_type" => "missed call" } }
        }
	else if ("inbound" in [direction] and "bridge" in [last_app] and "external" in [bridge_channel])
    	{
            mutate { add_field => { "meta_type" => "forwarded call" } }
    	}

	ruby{
       code => "event.set('start_unix', event.get('start_unix')/1000)"
    }
   ruby{
       code => "event.set('hangup_unix', event.get('hangup_unix')/1000)"
    }

    date{
                match => [ "start_unix", "UNIX_MS" ]
                target => "start time"
        }

    date{
                match => [ "answer_unix", "UNIX" ]
                target => "answer time"
        }

    date{
                match => [ "hangup_unix", "UNIX_MS" ]
                target => "hangup time"
        }
    
    ruby{
       code => "event.set('answer_unix', event.get('answer_unix')*1000)"
    }


        fingerprint {
        method => "SHA256"
        source => ["flowid", "billsec", "meta_type", "callerID"]
        target => "[@metadata][generated_id]"
        concatenate_sources => true 
    }
	
	if("" in [meta_type] and "CALL_REJECTED" in [hangup causes] and "RECEIVED,send_refuse" in [dispositions])
	{
		mutate { update => {"meta_type" => "rejected call"}}
	}
	
#	mutate {
#        update => { "flowid" => "%{[@metadata][generated_id]}" }
#      }    
}

output {
    
    elasticsearch {
       document_id => "%{[@metadata][generated_id]}"
       hosts => "http://es01:9200"
       index => "fusionpbx"
       user => "elastic"
		password => "test#123"
    }


    if ("" in [meta_type]) {
    
#    websocket {
#        host => "0.0.0.0"
#        port => 3015
#        codec => "json"
#    } 
    stdout{ codec => json}
    
    elasticsearch {
      document_id => "%{[@metadata][generated_id]}"
      hosts => "http://es01:9200"
      index => "fusionpbx_missed_call"
      user => "elastic"
		password => "test#123"
    }
    
    http {
        url => "http://pbxlog-service:3011/fusionpbx"
        http_method => "post"
        headers => ["Authorization", "Basic cGJ4bG9nQGdjYWxscy5jbzpycFBUOFM1UnZVaGJZbFVHS3RqemxrbkI="]
        automatic_retries => 5
	connect_timeout => 30
	request_timeout => 120
	socket_timeout => 30
        }
    
  }

  

}
